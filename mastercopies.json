{
  "AMBModule": {
    "1.0.0": {
      "contractName": "AMBModule",
      "sourceName": "contracts/AMBModule.sol",
      "contractVersion": "1.0.0",
      "compilerVersion": "v0.8.20+commit.a1b79de6",
      "factory": "0xce0042b868300000d44a59004da54a005ffdcf9f",
      "address": "0x4A1360491c12da7f678359486ac5d99Fe61A17d3",
      "bytecode": "0x60806040523480156200001157600080fd5b5060405162002bbc38038062002bbc8339818101604052810190620000379190620009a4565b6000868686868686604051602001620000569695949392919062000acd565b604051602081830303815290604052905062000078816200008560201b60201c565b5050505050505062000da1565b600062000097620004da60201b60201c565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015620000e65750825b9050600060018367ffffffffffffffff161480156200011c575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156200012b575080155b1562000163576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620001b45760018560000160086101000a81548160ff0219169083151502179055505b6000806000806000808b806020019051810190620001d3919062000b7f565b955095509550955095509550620001f0866200050260201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160362000262576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002599062000c7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620002d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002cb9062000cee565b60405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600481905550620003ef866200052660201b60201c565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f523e377a4bf6c92e5fc7d99462b1d7f983014116ff0c646eba7267d11aba842c8760405162000465919062000d10565b60405180910390a45050505050508315620004d25760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051620004c9919062000d84565b60405180910390a15b505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b62000512620005bf60201b60201c565b62000523816200060860201b60201c565b50565b62000536620006a160201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620005ab5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620005a2919062000d10565b60405180910390fd5b620005bc816200074360201b60201c565b50565b620005cf6200082260201b60201c565b62000606576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b62000618620005bf60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200068d5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000684919062000d10565b60405180910390fd5b6200069e816200074360201b60201c565b50565b620006b16200084a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620006d76200085260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200074157620007036200084a60201b60201c565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040162000738919062000d10565b60405180910390fd5b565b6000620007556200089260201b60201c565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b600062000834620004da60201b60201c565b60000160089054906101000a900460ff16905090565b600033905090565b600080620008656200089260201b60201c565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008ec82620008bf565b9050919050565b620008fe81620008df565b81146200090a57600080fd5b50565b6000815190506200091e81620008f3565b92915050565b60006200093182620008df565b9050919050565b620009438162000924565b81146200094f57600080fd5b50565b600081519050620009638162000938565b92915050565b6000819050919050565b6200097e8162000969565b81146200098a57600080fd5b50565b6000815190506200099e8162000973565b92915050565b60008060008060008060c08789031215620009c457620009c3620008ba565b5b6000620009d489828a016200090d565b9650506020620009e789828a016200090d565b9550506040620009fa89828a016200090d565b945050606062000a0d89828a0162000952565b935050608062000a2089828a016200090d565b92505060a062000a3389828a016200098d565b9150509295509295509295565b62000a4b81620008df565b82525050565b6000819050919050565b600062000a7c62000a7662000a7084620008bf565b62000a51565b620008bf565b9050919050565b600062000a908262000a5b565b9050919050565b600062000aa48262000a83565b9050919050565b62000ab68162000a97565b82525050565b62000ac78162000969565b82525050565b600060c08201905062000ae4600083018962000a40565b62000af3602083018862000a40565b62000b02604083018762000a40565b62000b11606083018662000aab565b62000b20608083018562000a40565b62000b2f60a083018462000abc565b979650505050505050565b600062000b4782620008bf565b9050919050565b62000b598162000b3a565b811462000b6557600080fd5b50565b60008151905062000b798162000b4e565b92915050565b60008060008060008060c0878903121562000b9f5762000b9e620008ba565b5b600062000baf89828a0162000b68565b965050602062000bc289828a0162000b68565b955050604062000bd589828a0162000b68565b945050606062000be889828a0162000952565b935050608062000bfb89828a0162000b68565b92505060a062000c0e89828a016200098d565b9150509295509295509295565b600082825260208201905092915050565b7f4176617461722063616e206e6f74206265207a65726f20616464726573730000600082015250565b600062000c64601e8362000c1b565b915062000c718262000c2c565b602082019050919050565b6000602082019050818103600083015262000c978162000c55565b9050919050565b7f5461726765742063616e206e6f74206265207a65726f20616464726573730000600082015250565b600062000cd6601e8362000c1b565b915062000ce38262000c9e565b602082019050919050565b6000602082019050818103600083015262000d098162000cc7565b9050919050565b600060208201905062000d27600083018462000a40565b92915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600062000d6c62000d6662000d608462000d2d565b62000a51565b62000d37565b9050919050565b62000d7e8162000d4b565b82525050565b600060208201905062000d9b600083018462000d73565b92915050565b611e0b8062000db16000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063d4b8399211610066578063d4b8399214610224578063e69aa77114610242578063f2fde38b1461025e578063f77c47911461027a576100f5565b80638da5cb5b146101b057806392eefe9b146101ce5780639a8a0592146101ea578063a4f9edbf14610208576100f5565b806356f0cb01116100d357806356f0cb01146101505780635aef7de61461016c578063715018a61461018a578063776d1a0114610194576100f5565b8063086cfca8146100fa5780631062b39a146101165780634164139f14610134575b600080fd5b610114600480360381019061010f9190611280565b610298565b005b61011e610364565b60405161012b919061130c565b60405180910390f35b61014e600480360381019061014991906114c8565b61038a565b005b61016a60048036038101906101659190611280565b61065f565b005b61017461073b565b604051610181919061155a565b60405180910390f35b61019261075f565b005b6101ae60048036038101906101a99190611280565b610773565b005b6101b8610841565b6040516101c5919061155a565b60405180910390f35b6101e860048036038101906101e39190611280565b610879565b005b6101f2610955565b6040516101ff919061158e565b60405180910390f35b610222600480360381019061021d91906115a9565b61095b565b005b61022c610d86565b604051610239919061155a565b60405180910390f35b61025c6004803603810190610257919061161e565b610dac565b005b61027860048036038101906102739190611280565b610e02565b005b610282610e88565b60405161028f919061155a565b60405180910390f35b6102a0610eae565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f52ae88b092de36f87fb43fe794eb1381023b9c1bce563a871154022c63dce34260405160405180910390a35050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610411906116a8565b60405180910390fd5b600454600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e307dff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae91906116dd565b146104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e590611756565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d67bdd256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b8919061178b565b73ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590611804565b60405180910390fd5b61061a84848484610f35565b610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090611870565b60405180910390fd5b50505050565b610667610eae565b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee906118dc565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610767610eae565b6107716000610fe5565b565b61077b610eae565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f90cc2f570a6eb594b1580ea3e41247d2d73a55281889e86bd4ec2fc29c7e62d660405160405180910390a35050565b60008061084c6110bc565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b610881610eae565b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890611948565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b60006109656110e4565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156109b35750825b9050600060018367ffffffffffffffff161480156109e8575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156109f6575080155b15610a2d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610a7d5760018560000160086101000a81548160ff0219169083151502179055505b6000806000806000808b806020019051810190610a9a91906119e4565b955095509550955095509550610aaf8661110c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590611abd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8490611b29565b60405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600481905550610ca086610e02565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f523e377a4bf6c92e5fc7d99462b1d7f983014116ff0c646eba7267d11aba842c87604051610d14919061155a565b60405180910390a45050505050508315610d7e5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610d759190611b98565b60405180910390a15b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610db4610eae565b8060045403610df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610def90611bff565b60405180910390fd5b8060048190555050565b610e0a610eae565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7c5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610e73919061155a565b60405180910390fd5b610e8581610fe5565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610eb6611120565b73ffffffffffffffffffffffffffffffffffffffff16610ed4610841565b73ffffffffffffffffffffffffffffffffffffffff1614610f3357610ef7611120565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f2a919061155a565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663468721a7868686866040518563ffffffff1660e01b8152600401610f989493929190611d24565b6020604051808303816000875af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611da8565b9050949350505050565b6000610fef6110bc565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611114611128565b61111d81611168565b50565b600033905090565b6111306111ee565b611166576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611170611128565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111e25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016111d9919061155a565b60405180910390fd5b6111eb81610fe5565b50565b60006111f86110e4565b60000160089054906101000a900460ff16905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061124d82611222565b9050919050565b61125d81611242565b811461126857600080fd5b50565b60008135905061127a81611254565b92915050565b60006020828403121561129657611295611218565b5b60006112a48482850161126b565b91505092915050565b6000819050919050565b60006112d26112cd6112c884611222565b6112ad565b611222565b9050919050565b60006112e4826112b7565b9050919050565b60006112f6826112d9565b9050919050565b611306816112eb565b82525050565b600060208201905061132160008301846112fd565b92915050565b6000819050919050565b61133a81611327565b811461134557600080fd5b50565b60008135905061135781611331565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113b082611367565b810181811067ffffffffffffffff821117156113cf576113ce611378565b5b80604052505050565b60006113e261120e565b90506113ee82826113a7565b919050565b600067ffffffffffffffff82111561140e5761140d611378565b5b61141782611367565b9050602081019050919050565b82818337600083830152505050565b6000611446611441846113f3565b6113d8565b90508281526020810184848401111561146257611461611362565b5b61146d848285611424565b509392505050565b600082601f83011261148a5761148961135d565b5b813561149a848260208601611433565b91505092915050565b600281106114b057600080fd5b50565b6000813590506114c2816114a3565b92915050565b600080600080608085870312156114e2576114e1611218565b5b60006114f08782880161126b565b945050602061150187828801611348565b935050604085013567ffffffffffffffff8111156115225761152161121d565b5b61152e87828801611475565b925050606061153f878288016114b3565b91505092959194509250565b61155481611242565b82525050565b600060208201905061156f600083018461154b565b92915050565b6000819050919050565b61158881611575565b82525050565b60006020820190506115a3600083018461157f565b92915050565b6000602082840312156115bf576115be611218565b5b600082013567ffffffffffffffff8111156115dd576115dc61121d565b5b6115e984828501611475565b91505092915050565b6115fb81611575565b811461160657600080fd5b50565b600081359050611618816115f2565b92915050565b60006020828403121561163457611633611218565b5b600061164284828501611609565b91505092915050565b600082825260208201905092915050565b7f556e617574686f72697a656420616d6200000000000000000000000000000000600082015250565b600061169260108361164b565b915061169d8261165c565b602082019050919050565b600060208201905081810360008301526116c181611685565b9050919050565b6000815190506116d7816115f2565b92915050565b6000602082840312156116f3576116f2611218565b5b6000611701848285016116c8565b91505092915050565b7f556e617574686f72697a656420636861696e4964000000000000000000000000600082015250565b600061174060148361164b565b915061174b8261170a565b602082019050919050565b6000602082019050818103600083015261176f81611733565b9050919050565b60008151905061178581611254565b92915050565b6000602082840312156117a1576117a0611218565b5b60006117af84828501611776565b91505092915050565b7f556e617574686f72697a656420636f6e74726f6c6c6572000000000000000000600082015250565b60006117ee60178361164b565b91506117f9826117b8565b602082019050919050565b6000602082019050818103600083015261181d816117e1565b9050919050565b7f4d6f64756c65207472616e73616374696f6e206661696c656400000000000000600082015250565b600061185a60198361164b565b915061186582611824565b602082019050919050565b600060208201905081810360008301526118898161184d565b9050919050565b7f414d42206164647265737320616c72656164792073657420746f207468697300600082015250565b60006118c6601f8361164b565b91506118d182611890565b602082019050919050565b600060208201905081810360008301526118f5816118b9565b9050919050565b7f636f6e74726f6c6c657220616c72656164792073657420746f20746869730000600082015250565b6000611932601e8361164b565b915061193d826118fc565b602082019050919050565b6000602082019050818103600083015261196181611925565b9050919050565b600061197382611222565b9050919050565b61198381611968565b811461198e57600080fd5b50565b6000815190506119a08161197a565b92915050565b60006119b182611242565b9050919050565b6119c1816119a6565b81146119cc57600080fd5b50565b6000815190506119de816119b8565b92915050565b60008060008060008060c08789031215611a0157611a00611218565b5b6000611a0f89828a01611991565b9650506020611a2089828a01611991565b9550506040611a3189828a01611991565b9450506060611a4289828a016119cf565b9350506080611a5389828a01611991565b92505060a0611a6489828a016116c8565b9150509295509295509295565b7f4176617461722063616e206e6f74206265207a65726f20616464726573730000600082015250565b6000611aa7601e8361164b565b9150611ab282611a71565b602082019050919050565b60006020820190508181036000830152611ad681611a9a565b9050919050565b7f5461726765742063616e206e6f74206265207a65726f20616464726573730000600082015250565b6000611b13601e8361164b565b9150611b1e82611add565b602082019050919050565b60006020820190508181036000830152611b4281611b06565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000611b82611b7d611b7884611b49565b6112ad565b611b53565b9050919050565b611b9281611b67565b82525050565b6000602082019050611bad6000830184611b89565b92915050565b7f636861696e496420616c72656164792073657420746f20746869730000000000600082015250565b6000611be9601b8361164b565b9150611bf482611bb3565b602082019050919050565b60006020820190508181036000830152611c1881611bdc565b9050919050565b611c2881611327565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c68578082015181840152602081019050611c4d565b60008484015250505050565b6000611c7f82611c2e565b611c898185611c39565b9350611c99818560208601611c4a565b611ca281611367565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611ced57611cec611cad565b5b50565b6000819050611cfe82611cdc565b919050565b6000611d0e82611cf0565b9050919050565b611d1e81611d03565b82525050565b6000608082019050611d39600083018761154b565b611d466020830186611c1f565b8181036040830152611d588185611c74565b9050611d676060830184611d15565b95945050505050565b60008115159050919050565b611d8581611d70565b8114611d9057600080fd5b50565b600081519050611da281611d7c565b92915050565b600060208284031215611dbe57611dbd611218565b5b6000611dcc84828501611d93565b9150509291505056fea264697066735822122093e190ec5d4b0fa185099d7bafbf596284216c28775d641b95a22dbcca93821764736f6c63430008140033",
      "constructorArgs": {
        "types": [
          "address",
          "address",
          "address",
          "uint256",
          "uint256"
        ],
        "values": [
          "0x0000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000001",
          "0x0000000000000000000000000000000000000001",
          0,
          0
        ]
      },
      "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_avatar",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            },
            {
              "internalType": "contract IAMB",
              "name": "_amb",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_controller",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_chainId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "InvalidInitialization",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotInitializing",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "avatar",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "name": "AmbModuleSetup",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousAvatar",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newAvatar",
              "type": "address"
            }
          ],
          "name": "AvatarSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint64",
              "name": "version",
              "type": "uint64"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousTarget",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newTarget",
              "type": "address"
            }
          ],
          "name": "TargetSet",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "amb",
          "outputs": [
            {
              "internalType": "contract IAMB",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "avatar",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "chainId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "controller",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "enum Enum.Operation",
              "name": "operation",
              "type": "uint8"
            }
          ],
          "name": "executeTransaction",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_amb",
              "type": "address"
            }
          ],
          "name": "setAmb",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_avatar",
              "type": "address"
            }
          ],
          "name": "setAvatar",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_chainId",
              "type": "bytes32"
            }
          ],
          "name": "setChainId",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_controller",
              "type": "address"
            }
          ],
          "name": "setController",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_target",
              "type": "address"
            }
          ],
          "name": "setTarget",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "initParams",
              "type": "bytes"
            }
          ],
          "name": "setUp",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "target",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "compilerInput": {
        "language": "Solidity",
        "sources": {
          "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
          },
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
          },
          "contracts/AMBModule.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport \"zodiac-core/contracts/core/Module.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ninterface IAMB {\n  function messageSender() external view returns (address);\n\n  function messageId() external view returns (bytes32);\n\n  function messageSourceChainId() external view returns (bytes32);\n\n  function requireToPassMessage(\n    address _contract,\n    bytes memory _data,\n    uint256 _gas\n  ) external returns (bytes32);\n}\n\ncontract AMBModule is Module {\n  event AmbModuleSetup(\n    address indexed initiator,\n    address indexed owner,\n    address indexed avatar,\n    address target\n  );\n\n  IAMB public amb;\n  address public controller;\n  bytes32 public chainId;\n\n  /// @param _owner Address of the  owner\n  /// @param _avatar Address of the avatar (e.g. a Safe)\n  /// @param _target Address of the contract that will call exec function\n  /// @param _amb Address of the AMB contract\n  /// @param _controller Address of the authorized controller contract on the other side of the bridge\n  /// @param _chainId Address of the authorized chainId from which owner can initiate transactions\n  constructor(\n    address _owner,\n    address _avatar,\n    address _target,\n    IAMB _amb,\n    address _controller,\n    bytes32 _chainId\n  ) {\n    bytes memory initParams = abi.encode(\n      _owner,\n      _avatar,\n      _target,\n      _amb,\n      _controller,\n      _chainId\n    );\n    setUp(initParams);\n  }\n\n  function setUp(bytes memory initParams) public override initializer {\n    (\n      address _owner,\n      address _avatar,\n      address _target,\n      IAMB _amb,\n      address _controller,\n      bytes32 _chainId\n    ) = abi.decode(\n        initParams,\n        (address, address, address, IAMB, address, bytes32)\n      );\n    __Ownable_init(_owner);\n\n    require(_avatar != address(0), \"Avatar can not be zero address\");\n    require(_target != address(0), \"Target can not be zero address\");\n    avatar = _avatar;\n    target = _target;\n    amb = _amb;\n    controller = _controller;\n    chainId = _chainId;\n\n    transferOwnership(_owner);\n\n    emit AmbModuleSetup(msg.sender, _owner, _avatar, _target);\n  }\n\n  /// @dev Check that the amb, chainId, and owner are valid\n  modifier onlyValid() {\n    require(msg.sender == address(amb), \"Unauthorized amb\");\n    require(amb.messageSourceChainId() == chainId, \"Unauthorized chainId\");\n    require(amb.messageSender() == controller, \"Unauthorized controller\");\n    _;\n  }\n\n  /// @dev Set the AMB contract address\n  /// @param _amb Address of the AMB contract\n  /// @notice This can only be called by the owner\n  function setAmb(address _amb) public onlyOwner {\n    require(address(amb) != _amb, \"AMB address already set to this\");\n    amb = IAMB(_amb);\n  }\n\n  /// @dev Set the approved chainId\n  /// @param _chainId ID of the approved network\n  /// @notice This can only be called by the owner\n  function setChainId(bytes32 _chainId) public onlyOwner {\n    require(chainId != _chainId, \"chainId already set to this\");\n    chainId = _chainId;\n  }\n\n  /// @dev Set the controller address\n  /// @param _controller Set the address of controller on the other side of the bridge\n  /// @notice This can only be called by the owner\n  function setController(address _controller) public onlyOwner {\n    require(controller != _controller, \"controller already set to this\");\n    controller = _controller;\n  }\n\n  /// @dev Executes a transaction initated by the AMB\n  /// @param to Target of the transaction that should be executed\n  /// @param value Wei value of the transaction that should be executed\n  /// @param data Data of the transaction that should be executed\n  /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\n  function executeTransaction(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) public onlyValid {\n    require(exec(to, value, data, operation), \"Module transaction failed\");\n  }\n}\n"
          },
          "zodiac-core/contracts/core/Module.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\nimport {FactoryFriendly} from \"../factory/FactoryFriendly.sol\";\nimport {IAvatar} from \"../interfaces/IAvatar.sol\";\n\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\nabstract contract Module is FactoryFriendly {\n  /// @dev Address that will ultimately execute function calls.\n  address public avatar;\n  /// @dev Address that this module will pass transactions to.\n  address public target;\n\n  /// @dev Emitted each time the avatar is set.\n  event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\n  /// @dev Emitted each time the Target is set.\n  event TargetSet(address indexed previousTarget, address indexed newTarget);\n\n  /// @dev Sets the avatar to a new avatar (`newAvatar`).\n  /// @notice Can only be called by the current owner.\n  function setAvatar(address _avatar) public onlyOwner {\n    address previousAvatar = avatar;\n    avatar = _avatar;\n    emit AvatarSet(previousAvatar, _avatar);\n  }\n\n  /// @dev Sets the target to a new target (`newTarget`).\n  /// @notice Can only be called by the current owner.\n  function setTarget(address _target) public onlyOwner {\n    address previousTarget = target;\n    target = _target;\n    emit TargetSet(previousTarget, _target);\n  }\n\n  /// @dev Passes a transaction to be executed by the avatar.\n  /// @notice Can only be called by this contract.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function exec(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) internal virtual returns (bool success) {\n    return\n      IAvatar(target).execTransactionFromModule(to, value, data, operation);\n  }\n\n  /// @dev Passes a transaction to be executed by the target and returns data.\n  /// @notice Can only be called by this contract.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execAndReturnData(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) internal virtual returns (bool success, bytes memory returnData) {\n    return\n      IAvatar(target).execTransactionFromModuleReturnData(\n        to,\n        value,\n        data,\n        operation\n      );\n  }\n}\n"
          },
          "zodiac-core/contracts/factory/FactoryFriendly.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\npragma solidity >=0.7.0 <0.9.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract FactoryFriendly is OwnableUpgradeable {\n  function setUp(bytes memory initializeParams) public virtual;\n}\n"
          },
          "zodiac-core/contracts/interfaces/IAvatar.sol": {
            "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport {Enum} from \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IAvatar {\n  event EnabledModule(address module);\n  event DisabledModule(address module);\n  event ExecutionFromModuleSuccess(address indexed module);\n  event ExecutionFromModuleFailure(address indexed module);\n\n  /// @dev Enables a module on the avatar.\n  /// @notice Can only be called by the avatar.\n  /// @notice Modules should be stored as a linked list.\n  /// @notice Must emit EnabledModule(address module) if successful.\n  /// @param module Module to be enabled.\n  function enableModule(address module) external;\n\n  /// @dev Disables a module on the avatar.\n  /// @notice Can only be called by the avatar.\n  /// @notice Must emit DisabledModule(address module) if successful.\n  /// @param prevModule Address that pointed to the module to be removed in the linked list\n  /// @param module Module to be removed.\n  function disableModule(address prevModule, address module) external;\n\n  /// @dev Allows a Module to execute a transaction.\n  /// @notice Can only be called by an enabled module.\n  /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n  /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execTransactionFromModule(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) external returns (bool success);\n\n  /// @dev Allows a Module to execute a transaction and return data\n  /// @notice Can only be called by an enabled module.\n  /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n  /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n  /// @param to Destination address of module transaction.\n  /// @param value Ether value of module transaction.\n  /// @param data Data payload of module transaction.\n  /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n  function execTransactionFromModuleReturnData(\n    address to,\n    uint256 value,\n    bytes memory data,\n    Enum.Operation operation\n  ) external returns (bool success, bytes memory returnData);\n\n  /// @dev Returns if an module is enabled\n  /// @return True if the module is enabled\n  function isModuleEnabled(address module) external view returns (bool);\n\n  /// @dev Returns array of modules.\n  /// @param start Start of the page.\n  /// @param pageSize Maximum number of modules that should be returned.\n  /// @return array Array of modules.\n  /// @return next Start of the next page.\n  function getModulesPaginated(\n    address start,\n    uint256 pageSize\n  ) external view returns (address[] memory array, address next);\n}\n"
          }
        },
        "settings": {
          "evmVersion": "paris",
          "optimizer": {
            "enabled": false,
            "runs": 200
          },
          "outputSelection": {
            "*": {
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "devdoc",
                "userdoc",
                "storageLayout",
                "evm.gasEstimates"
              ],
              "": [
                "ast"
              ]
            }
          },
          "metadata": {
            "useLiteralContent": true
          }
        }
      }
    }
  }
}